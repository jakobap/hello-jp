{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._enhance = void 0;\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\nconst _helpers = require(\"./helpers\");\nconst protos = require(\"../protos/protos\");\nconst enhancedTypesJson = require('./enhanced-types.json');\n// Walk the tree of nested namespaces contained within the enhanced-types.json file\nfunction walkNamespaces(jsonNode, rootNamespace) {\n  for (const namespaceName in jsonNode) {\n    if (Object.hasOwnProperty.call(jsonNode, namespaceName)) {\n      const namespace = rootNamespace[namespaceName];\n      // Get the namespace object from JSON\n      const namespaceJsonObject = jsonNode[namespaceName];\n      // Verify that this is an array node.\n      if (namespace && namespaceJsonObject && Array.isArray(namespaceJsonObject)) {\n        // Assign the methods to this list of types.\n        assignMethodsToMessages(namespace, namespaceJsonObject);\n        // Check if this is another node.\n      } else if (namespace && namespaceJsonObject && typeof namespaceJsonObject === 'object' && !Array.isArray(namespaceJsonObject)) {\n        // Iterate over the next level of namespaces\n        walkNamespaces(namespaceJsonObject, namespace);\n      }\n    }\n  }\n}\n// Assign the toValue() and fromValue() helper methods to the enhanced message objects.\nfunction assignMethodsToMessages(\n// tslint:disable-next-line no-any\nnamespace, messages) {\n  for (const message of messages) {\n    if (message in namespace) {\n      const enhancedMessage = namespace[message];\n      if (enhancedMessage) {\n        Object.assign(enhancedMessage.prototype, _helpers.addToValue());\n        // Capture reference to `enhancedMessage` class in closure below.\n        const _addFromValue = {\n          fromValue: value => {\n            const messageType = enhancedMessage;\n            const message = messageType.create();\n            const convertedValue = _helpers.fromValue(value);\n            if (convertedValue !== undefined) {\n              Object.assign(message, convertedValue);\n              return message;\n            }\n            return undefined;\n          }\n        };\n        Object.assign(enhancedMessage, _addFromValue);\n      }\n    }\n  }\n}\nfunction _enhance(apiVersion) {\n  const schemaRoot = enhancedTypesJson[apiVersion]['schema'];\n  const namespaceRoot = protos.google.cloud.aiplatform[apiVersion];\n  const namespaceSchemaRoot = namespaceRoot['schema'];\n  walkNamespaces(schemaRoot, namespaceSchemaRoot);\n}\nexports._enhance = _enhance;","map":{"version":3,"names":["Object","defineProperty","exports","value","_enhance","_helpers","require","protos","enhancedTypesJson","walkNamespaces","jsonNode","rootNamespace","namespaceName","hasOwnProperty","call","namespace","namespaceJsonObject","Array","isArray","assignMethodsToMessages","messages","message","enhancedMessage","assign","prototype","addToValue","_addFromValue","fromValue","messageType","create","convertedValue","undefined","apiVersion","schemaRoot","namespaceRoot","google","cloud","aiplatform","namespaceSchemaRoot"],"sources":["/Users/poerschmann/Documents/pers_projects/hello-jp/node_modules/@google-cloud/aiplatform/build/src/decorator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._enhance = void 0;\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\nconst _helpers = require(\"./helpers\");\nconst protos = require(\"../protos/protos\");\nconst enhancedTypesJson = require('./enhanced-types.json');\n// Walk the tree of nested namespaces contained within the enhanced-types.json file\nfunction walkNamespaces(jsonNode, rootNamespace) {\n    for (const namespaceName in jsonNode) {\n        if (Object.hasOwnProperty.call(jsonNode, namespaceName)) {\n            const namespace = rootNamespace[namespaceName];\n            // Get the namespace object from JSON\n            const namespaceJsonObject = jsonNode[namespaceName];\n            // Verify that this is an array node.\n            if (namespace &&\n                namespaceJsonObject &&\n                Array.isArray(namespaceJsonObject)) {\n                // Assign the methods to this list of types.\n                assignMethodsToMessages(namespace, namespaceJsonObject);\n                // Check if this is another node.\n            }\n            else if (namespace &&\n                namespaceJsonObject &&\n                typeof namespaceJsonObject === 'object' &&\n                !Array.isArray(namespaceJsonObject)) {\n                // Iterate over the next level of namespaces\n                walkNamespaces(namespaceJsonObject, namespace);\n            }\n        }\n    }\n}\n// Assign the toValue() and fromValue() helper methods to the enhanced message objects.\nfunction assignMethodsToMessages(\n// tslint:disable-next-line no-any\nnamespace, messages) {\n    for (const message of messages) {\n        if (message in namespace) {\n            const enhancedMessage = namespace[message];\n            if (enhancedMessage) {\n                Object.assign(enhancedMessage.prototype, _helpers.addToValue());\n                // Capture reference to `enhancedMessage` class in closure below.\n                const _addFromValue = {\n                    fromValue: (value) => {\n                        const messageType = enhancedMessage;\n                        const message = messageType.create();\n                        const convertedValue = _helpers.fromValue(value);\n                        if (convertedValue !== undefined) {\n                            Object.assign(message, convertedValue);\n                            return message;\n                        }\n                        return undefined;\n                    },\n                };\n                Object.assign(enhancedMessage, _addFromValue);\n            }\n        }\n    }\n}\nfunction _enhance(apiVersion) {\n    const schemaRoot = enhancedTypesJson[apiVersion]['schema'];\n    const namespaceRoot = protos.google.cloud.aiplatform[apiVersion];\n    const namespaceSchemaRoot = namespaceRoot['schema'];\n    walkNamespaces(schemaRoot, namespaceSchemaRoot);\n}\nexports._enhance = _enhance;\n//# sourceMappingURL=decorator.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMC,MAAM,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC1C,MAAME,iBAAiB,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAC1D;AACA,SAASG,cAAcA,CAACC,QAAQ,EAAEC,aAAa,EAAE;EAC7C,KAAK,MAAMC,aAAa,IAAIF,QAAQ,EAAE;IAClC,IAAIV,MAAM,CAACa,cAAc,CAACC,IAAI,CAACJ,QAAQ,EAAEE,aAAa,CAAC,EAAE;MACrD,MAAMG,SAAS,GAAGJ,aAAa,CAACC,aAAa,CAAC;MAC9C;MACA,MAAMI,mBAAmB,GAAGN,QAAQ,CAACE,aAAa,CAAC;MACnD;MACA,IAAIG,SAAS,IACTC,mBAAmB,IACnBC,KAAK,CAACC,OAAO,CAACF,mBAAmB,CAAC,EAAE;QACpC;QACAG,uBAAuB,CAACJ,SAAS,EAAEC,mBAAmB,CAAC;QACvD;MACJ,CAAC,MACI,IAAID,SAAS,IACdC,mBAAmB,IACnB,OAAOA,mBAAmB,KAAK,QAAQ,IACvC,CAACC,KAAK,CAACC,OAAO,CAACF,mBAAmB,CAAC,EAAE;QACrC;QACAP,cAAc,CAACO,mBAAmB,EAAED,SAAS,CAAC;MAClD;IACJ;EACJ;AACJ;AACA;AACA,SAASI,uBAAuBA;AAChC;AACAJ,SAAS,EAAEK,QAAQ,EAAE;EACjB,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;IAC5B,IAAIC,OAAO,IAAIN,SAAS,EAAE;MACtB,MAAMO,eAAe,GAAGP,SAAS,CAACM,OAAO,CAAC;MAC1C,IAAIC,eAAe,EAAE;QACjBtB,MAAM,CAACuB,MAAM,CAACD,eAAe,CAACE,SAAS,EAAEnB,QAAQ,CAACoB,UAAU,CAAC,CAAC,CAAC;QAC/D;QACA,MAAMC,aAAa,GAAG;UAClBC,SAAS,EAAGxB,KAAK,IAAK;YAClB,MAAMyB,WAAW,GAAGN,eAAe;YACnC,MAAMD,OAAO,GAAGO,WAAW,CAACC,MAAM,CAAC,CAAC;YACpC,MAAMC,cAAc,GAAGzB,QAAQ,CAACsB,SAAS,CAACxB,KAAK,CAAC;YAChD,IAAI2B,cAAc,KAAKC,SAAS,EAAE;cAC9B/B,MAAM,CAACuB,MAAM,CAACF,OAAO,EAAES,cAAc,CAAC;cACtC,OAAOT,OAAO;YAClB;YACA,OAAOU,SAAS;UACpB;QACJ,CAAC;QACD/B,MAAM,CAACuB,MAAM,CAACD,eAAe,EAAEI,aAAa,CAAC;MACjD;IACJ;EACJ;AACJ;AACA,SAAStB,QAAQA,CAAC4B,UAAU,EAAE;EAC1B,MAAMC,UAAU,GAAGzB,iBAAiB,CAACwB,UAAU,CAAC,CAAC,QAAQ,CAAC;EAC1D,MAAME,aAAa,GAAG3B,MAAM,CAAC4B,MAAM,CAACC,KAAK,CAACC,UAAU,CAACL,UAAU,CAAC;EAChE,MAAMM,mBAAmB,GAAGJ,aAAa,CAAC,QAAQ,CAAC;EACnDzB,cAAc,CAACwB,UAAU,EAAEK,mBAAmB,CAAC;AACnD;AACApC,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}