{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromValue = exports.toValue = exports.addToValue = void 0;\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\nconst value_converter_1 = require(\"./value-converter\");\n// Assigns the toValue() function as a member of an enhanced class.\nfunction addToValue() {\n  const methods = {};\n  methods.toValue = function () {\n    return toValue(this);\n  };\n  return methods;\n}\nexports.addToValue = addToValue;\n/**\n * Converts an object or protobuf.Message to a protobuf.Value object.\n * @param message Object or protobuf.Message to convert\n * @returns a Value-formatted object\n */\nfunction toValue(message) {\n  if (message === undefined) {\n    return undefined;\n  }\n  const value = (0, value_converter_1.googleProtobufValueFromObject)(message, val => {\n    return val;\n  });\n  return value;\n}\nexports.toValue = toValue;\n/**\n * Creates instance of class from a protobuf.Value object.\n * @param value Value to convert\n * @returns a Message\n */\nfunction fromValue(value) {\n  if (!value) {\n    return undefined;\n  }\n  if (!value.structValue || !value.structValue.fields) {\n    throw new Error('ERROR: fromValue() was provided a malformed protobuf object');\n  }\n  return (0, value_converter_1.googleProtobufValueToObject)(value);\n}\nexports.fromValue = fromValue;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromValue","toValue","addToValue","value_converter_1","require","methods","message","undefined","googleProtobufValueFromObject","val","structValue","fields","Error","googleProtobufValueToObject"],"sources":["/Users/poerschmann/Documents/pers_projects/hello-jp/node_modules/@google-cloud/aiplatform/build/src/helpers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromValue = exports.toValue = exports.addToValue = void 0;\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\nconst value_converter_1 = require(\"./value-converter\");\n// Assigns the toValue() function as a member of an enhanced class.\nfunction addToValue() {\n    const methods = {};\n    methods.toValue = function () {\n        return toValue(this);\n    };\n    return methods;\n}\nexports.addToValue = addToValue;\n/**\n * Converts an object or protobuf.Message to a protobuf.Value object.\n * @param message Object or protobuf.Message to convert\n * @returns a Value-formatted object\n */\nfunction toValue(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    const value = (0, value_converter_1.googleProtobufValueFromObject)(message, (val) => {\n        return val;\n    });\n    return value;\n}\nexports.toValue = toValue;\n/**\n * Creates instance of class from a protobuf.Value object.\n * @param value Value to convert\n * @returns a Message\n */\nfunction fromValue(value) {\n    if (!value) {\n        return undefined;\n    }\n    if (!value.structValue || !value.structValue.fields) {\n        throw new Error('ERROR: fromValue() was provided a malformed protobuf object');\n    }\n    return (0, value_converter_1.googleProtobufValueToObject)(value);\n}\nexports.fromValue = fromValue;\n//# sourceMappingURL=helpers.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACG,OAAO,GAAGH,OAAO,CAACI,UAAU,GAAG,KAAK,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACtD;AACA,SAASF,UAAUA,CAAA,EAAG;EAClB,MAAMG,OAAO,GAAG,CAAC,CAAC;EAClBA,OAAO,CAACJ,OAAO,GAAG,YAAY;IAC1B,OAAOA,OAAO,CAAC,IAAI,CAAC;EACxB,CAAC;EACD,OAAOI,OAAO;AAClB;AACAP,OAAO,CAACI,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA,SAASD,OAAOA,CAACK,OAAO,EAAE;EACtB,IAAIA,OAAO,KAAKC,SAAS,EAAE;IACvB,OAAOA,SAAS;EACpB;EACA,MAAMR,KAAK,GAAG,CAAC,CAAC,EAAEI,iBAAiB,CAACK,6BAA6B,EAAEF,OAAO,EAAGG,GAAG,IAAK;IACjF,OAAOA,GAAG;EACd,CAAC,CAAC;EACF,OAAOV,KAAK;AAChB;AACAD,OAAO,CAACG,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA,SAASD,SAASA,CAACD,KAAK,EAAE;EACtB,IAAI,CAACA,KAAK,EAAE;IACR,OAAOQ,SAAS;EACpB;EACA,IAAI,CAACR,KAAK,CAACW,WAAW,IAAI,CAACX,KAAK,CAACW,WAAW,CAACC,MAAM,EAAE;IACjD,MAAM,IAAIC,KAAK,CAAC,6DAA6D,CAAC;EAClF;EACA,OAAO,CAAC,CAAC,EAAET,iBAAiB,CAACU,2BAA2B,EAAEd,KAAK,CAAC;AACpE;AACAD,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}